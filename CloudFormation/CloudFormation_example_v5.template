{
"AWSTemplateFormatVersion" : "2010-09-09",
"Description" : "Company - Formation of Server Machines @ Oregon (us-west-2)",

	"Parameters" : {
		"UserScriptVersion" : {
			"Type" : "String",
			"Default" : "5",
			"AllowedValues" : ["1", "2", "3", "4", "5"],
			"Description" : "Select script version"
		},

		"EnvType" : {
			"Type" : "String",
			"Default" : "Dev",
			"AllowedValues" : [ "Stg", "Load", "Prd", "Dev" ],
			"Description" : "Select environment type"
		},

		"ApiInstanceType" : {
			"Type" : "String",
			"Default" : "m3.medium",
			"AllowedValues" : ["m3.medium", "m3.large", "c1.medium", "c3.2xlarge"],
			"Description" : "Instance Type for Api"
		},

		"BatchInstanceType" : {
			"Type" : "String",
			"Default" : "m3.medium",
			"AllowedValues" : ["m3.medium", "m3.large", "c1.medium", "c3.2xlarge"],
			"Description" : "Instance Type for Batch"
		},

		"AnalyticsInstanceType" : {
			"Type" : "String",
			"Default" : "m3.medium",
			"AllowedValues" : ["m3.medium", "m3.large", "c1.medium", "c3.2xlarge"],
			"Description" : "Instance Type for Analytics"
		},

		"CassandraInstanceType" : {
			"Type" : "String",
			"Default" : "m3.large",
			"AllowedValues" : [ "m3.large", "m3.medium", "c1.medium", "c3.2xlarge"],
			"Description" : "Instance Type for Analytics"
		},

		"BuildNumber" : {
			"Type" : "String",
			"Default" : "0",
			"Description" : "Build Number of the jenkins job"
		},

		"Region" : {
			"Type" : "String",
			"Default" : "us-west-2",
			"Description" : "Choose the region to deploy the stack to",
			"AllowedValues" : [ "us-east-1", "us-west-2", "eu-west-1" ]
		},

		"TeamName" : {
			"Type": "String",
			"Default": "Company",
			"Description": "Project name for naming instance"
		},

		"VPCcidr" : {
			"Type" : "String",
			"Description" : "Choose stack cidr second octate"
		},

		"RDSSnapshotID" : {
			"Type" : "String",
			"Description": "Insert Snapshot ID to restore from"
		}
	},

	"Conditions": {
		"RDSSnapshotIDset" : { "Fn::Not" : [ { "Fn::Equals" : [ "", { "Ref" : "RDSSnapshotID" } ] } ] },
		"VPCcidrset" : { "Fn::Not" : [ { "Fn::Equals" : [ "", { "Ref" : "VPCcidr" } ] } ] }
	},

	"Mappings" : {

		"AMIMap" : {
			"us-east-1" : { "64" : "ami-e5bf699f" },
			"us-east-2" : { "64" : "ami-353d1150" },
			"us-west-1" : { "64" : "ami-23cdff43" },
			"us-west-2" : { "64" : "ami-335ef253" },
			"eu-west-1" : { "64" : "ami-7b499502" },
			"eu-central-1" : { "64" : "ami-7559e71a" },
			"eu-west-2" : { "64" : "ami-487a672c" }
		},

		"CassAmi" : {
			"us-east-1" : { "64" : "ami-c41d61be" },
			"us-west-2" : { "64" : "ami-d057f4a8" },
			"eu-west-1" : { "64" : "ami-3bd05042" }
		},

		"BastionAmi" : {
			"eu-west-1" : { "ami" : "ami-69309310" },
			"us-west-1" : { "ami" : "ami-651cab1f" },
			"us-west-2" : { "ami" : "ami-2fe82057" }
		},

		"CassPassword" : {
			"Dev"  : { "pass" : "CASS_PASS", "hash": "CASS_PASS_HASH" },
			"Stg"   : { "pass" : "CASS_PASS", "hash": "CASS_PASS_HASH" },
			"Prd" : { "pass" : "CASS_PASS", "hash": "CASS_PASS_HASH" }
		},

		"ScalingMin" : {
			"Dev"  : { "Batch" :  1 , "Api" : 2, "Analytics" : 2, "Cassandra" : 3, "Bastion" : 1 },
			"Load" : { "Batch" :  1 , "Api" : 2, "Analytics" : 1, "Cassandra" : 3, "Bastion" : 1 },
			"Stg"  : { "Batch" :  1 , "Api" : 2, "Analytics" : 1, "Cassandra" : 3, "Bastion" : 1 },
			"Prd" : { "Batch" :  1 , "Api" : 2, "Analytics" : 1, "Cassandra" : 3, "Bastion" : 1 }
		},

		"ScalingMax" : {
			"Dev"  : { "Batch" :  1 , "Api" : 4, "Analytics" : 2, "Cassandra" : 3, "Bastion" : 1 },
			"Load" : { "Batch" :  1 , "Api" : 2, "Analytics" : 2, "Cassandra" : 3, "Bastion" : 1 },
			"Stg"  : { "Batch" :  1 , "Api" : 4, "Analytics" : 1, "Cassandra" : 3, "Bastion" : 1 },
			"Prd" : { "Batch" :  1 , "Api" : 4, "Analytics" : 1, "Cassandra" : 3, "Bastion" : 1 }
		},

		"KeyPairMap" : {
			"Dev"  : { "kp" : "company" },
			"Load"  : { "kp" : "company" },
			"Stg"   : { "kp" : "company" },
			"Prd" : { "kp" : "company" }
		},

		"BastionKeyPair" : {
			"eu-west-1" : { "bkp" : "bastion" },
			"us-east-1" : { "bkp" : "bastion" },
			"us-west-2" : { "bkp" : "bastion" }
		},

		"LiquiBase" : {
			"Dev"  : { "dbscheme" : "company_staging", "dbadminuser" : "company_stagi", "dbpass" : "DB_PASS", "cassandraUser" : "cassandra", "cassandraPassword": "CASS_PASS" },
			"Load"  : { "dbscheme" : "company_staging", "dbadminuser" : "company_stagi", "dbpass" : "DB_PASS", "cassandraUser" : "cassandra", "cassandraPassword": "CASS_PASS" },
			"Stg"   : { "dbscheme" : "company_staging", "dbadminuser" : "company_stagi", "dbpass" : "DB_PASS", "cassandraUser" : "cassandra", "cassandraPassword": "CASS_PASS" },
			"Prd" : { "dbscheme" : "company_prod_us", "dbadminuser" : "prod_admin", "dbpass" : "DB_PASS", "cassandraUser" : "cassandra", "cassandraPassword": "CASS_PASS" }
		},

		"ASRDSUserPassword" : {
			"Dev" : { "rdsadminuser" : "admin", "rdsadminpassword" : "RDS_PASS" },
			"Load" : { "rdsadminuser" : "admin", "rdsadminpassword" : "RDS_PASS" },
			"Stg" : { "rdsadminuser" : "admin", "rdsadminpassword" : "RDS_PASS" },
			"Prd" : { "rdsadminuser" : "admin", "rdsadminpassword" : "RDS_PASS" }
		},

		"DBInstanceClass" : {
			"Dev" : { "classType" : "db.m1.medium" },
			"Load" : { "classType" : "db.m1.medium" },
			"Stg" : { "classType" : "db.m1.medium" },
			"Prd" : { "classType" : "db.m3.xlarge" }
		},

		"LoadBalancerProperties" : {
			"Dev" : { "scheme" : "internal" },
			"Load" : { "scheme" : "internet-facing" },
			"Stg" : { "scheme" : "internet-facing" },
			"Prd" : { "scheme" : "internet-facing" }
		},

		"CertificatesArn" : {
			"Dev" : { "certificateArn" : "arn:aws:iam::AWS_ACCOUNT_ID:server-certificate/wild_company.com_10072019" },
			"Load" : { "certificateArn" : "arn:aws:iam::AWS_ACCOUNT_ID:server-certificate/wild_company.com_10072019" },
			"Stg" : { "certificateArn" : "arn:aws:iam::AWS_ACCOUNT_ID:server-certificate/wild_company.com_10072019" },
			"Prd" : { "certificateArn" : "arn:aws:iam::AWS_ACCOUNT_ID:server-certificate/wild_company.com_10072019" }
		},

		"RDSAllocatedStorage" : {
			"Dev" : { "AllocatedStorage" : "20" },
			"Load" : { "AllocatedStorage" : "20" },
			"Stg" : { "AllocatedStorage" : "20" },
			"Prd" : { "AllocatedStorage" : "500" }
		},

		"PeeringVpcId" : {
			"us-west-2" : { "DefaultVpcId" : "vpc-20e2094b" },
			"us-west-1" : { "DefaultVpcId" : "vpc-e557d89d" },
			"eu-west-1" : { "DefaultVpcId" : "vpc-01898666" }
		}
	},

	"Resources" : {
		"VPC": {
			"Type" : "AWS::EC2::VPC",
			"Description" : "Choose which VPC the security groups should be deployed to",
			"Properties" : {
				"CidrBlock" : { "Fn::Join" : [ "", [ "172.", { "Ref" : "VPCcidr" }, ".0.0/16" ] ] },
				"EnableDnsSupport" : "true",
				"EnableDnsHostnames" : "true",
				"InstanceTenancy" : "default"
			}
		},

		"VPCPeering" : {
			"Type" : "AWS::EC2::VPCPeeringConnection",
			"Properties" : {
				"PeerVpcId" : { "Fn::FindInMap" : [ "PeeringVpcId", { "Ref" : "Region" }, "DefaultVpcId" ] },
				"VpcId" : { "Ref" : "VPC" }
			}
		},

		"VPCHostedZone" : {
			"Type" : "AWS::Route53::HostedZone",
			"Properties" : {
				"HostedZoneTags" : [
					{ "Key" : "VpcId" , "Value" : { "Ref" : "VPC" } },
					{ "Key" : "StackName" , "Value" : { "Ref" : "AWS::StackName" } }
				],
				"Name" : { "Fn::Join" : [ ".", [ { "Ref" : "VPC" }, { "Ref" : "Region" }, "company", "private" ] ] },
				"VPCs" : [ {
					"VPCId" : { "Ref" : "VPC" },
					"VPCRegion" : { "Ref" : "Region" }
				} ]
			}
		},

		"ApiLoadBalancer" : {
			"Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
			"Properties": {
				"Name" : { "Fn::Join" : [ "-" ,[ "Api", { "Ref" : "EnvType" }, { "Ref" : "VPC" } ] ] },
				"Scheme" : { "Fn::FindInMap" : [ "LoadBalancerProperties", { "Ref" : "EnvType" }, "scheme" ] },
				"Subnets" : [ { "Ref" : "SubnetOne" }, { "Ref" : "SubnetTwo" }, { "Ref" : "SubnetThree" } ],
				"LoadBalancerAttributes" : [
					{ "Key" : "idle_timeout.timeout_seconds", "Value" : "50" } ],
				"IpAddressType" : "ipv4",
				"SecurityGroups" : [ { "Ref" : "ELBSG" } ]
			}
		},

		"RDSSubnetGroup" : {
			"Type" : "AWS::RDS::DBSubnetGroup",
			"Properties" : {
			  "DBSubnetGroupDescription" : "RDS Subnet Group",
			  "SubnetIds" : [ { "Ref" : "SubnetOne" }, { "Ref" : "SubnetTwo" }, { "Ref" : "SubnetThree" } ]
			}
		},

		"ASRDSdb" : {
			"Type" : "AWS::RDS::DBInstance",
			"Properties" : {
				"DBInstanceIdentifier" : { "Fn::Join" : [ "-", [ { "Ref" : "EnvType" }, "mysql", { "Ref" : "BuildNumber" }, { "Ref" : "VPC" } ] ] },
				"AllocatedStorage" : { "Fn::FindInMap" : [ "RDSAllocatedStorage", { "Ref" : "EnvType" }, "AllocatedStorage" ] },
				"DBSnapshotIdentifier" : { "Fn::If" : [ "RDSSnapshotIDset", { "Ref" : "RDSSnapshotID" }, { "Ref" : "AWS::NoValue" } ] },
				"DBInstanceClass" : { "Fn::FindInMap" : [ "DBInstanceClass", { "Ref" : "EnvType" }, "classType" ] },
				"Engine" : "MySQL",
				"EngineVersion" : "5.6",
				"DBParameterGroupName" : "enable-triggers",
				"DBSubnetGroupName" : { "Ref" : "RDSSubnetGroup" },
				"MasterUsername" : { "Fn::FindInMap" : [ "ASRDSUserPassword", { "Ref" : "EnvType" }, "rdsadminuser" ] },
				"MasterUserPassword" : { "Fn::FindInMap" : [ "ASRDSUserPassword", { "Ref" : "EnvType" }, "rdsadminpassword" ] },
				"MultiAZ" : "true",
				"Port" : "3306",
				"PubliclyAccessible" : "false",
				"StorageType" : "gp2",
				"VPCSecurityGroups" : [ { "Ref" : "ASGPilot" }, { "Ref" : "RDSSG" } ],
				"PreferredMaintenanceWindow" : "fri:01:00-fri:01:30",
				"Tags" : [ { "Key" : "workload-type", "Value" : "other" } ]
			}
		},

		"SubnetRouteTableAssociationS1" : {
			"Type" : "AWS::EC2::SubnetRouteTableAssociation",
			"Properties" : {
				"RouteTableId" : { "Ref" : "RouteTable" },
				"SubnetId" : { "Ref" : "SubnetOne" }
			}
		},

		"SubnetRouteTableAssociationS2" : {
			"Type" : "AWS::EC2::SubnetRouteTableAssociation",
			"Properties" : {
				"RouteTableId" : { "Ref" : "RouteTable" },
				"SubnetId" : { "Ref" : "SubnetTwo" }
			}
		},

		"SubnetRouteTableAssociationS3" : {
			"Type" : "AWS::EC2::SubnetRouteTableAssociation",
			"Properties" : {
				"RouteTableId" : { "Ref" : "RouteTable" },
				"SubnetId" : { "Ref" : "SubnetThree" }
			}
		},

		"SubnetOne": {
			"Type" : "AWS::EC2::Subnet",
			"Properties" : {
				"AvailabilityZone" : { "Fn::Select" : [ "0", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] },
				"CidrBlock" : { "Fn::Join" : [ "", [ "172.", { "Ref" : "VPCcidr" }, ".0.0/20" ] ] },
				"MapPublicIpOnLaunch" : "true",
				"VpcId" : { "Ref" : "VPC" }
			}
		},

		"SubnetTwo": {
			"Type" : "AWS::EC2::Subnet",
			"Properties" : {
				"AvailabilityZone" : { "Fn::Select" : [ "1", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] },
				"CidrBlock" : { "Fn::Join" : [ "", [ "172.", { "Ref" : "VPCcidr" }, ".16.0/20" ] ] },
				"MapPublicIpOnLaunch" : "true",
				"VpcId" : { "Ref" : "VPC" }
			}
		},

		"SubnetThree": {
			"Type" : "AWS::EC2::Subnet",
			"Properties" : {
				"AvailabilityZone" : { "Fn::Select" : [ "2", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] },
				"CidrBlock" : { "Fn::Join" : [ "", [ "172.", { "Ref" : "VPCcidr" }, ".32.0/20" ] ] },
				"MapPublicIpOnLaunch" : "true",
				"VpcId" : { "Ref" : "VPC" }
			}
		},

		"RouteTable" : {
			"Type" : "AWS::EC2::RouteTable",
			"Properties" : {
				"VpcId" : { "Ref" : "VPC" }
			}
		},

		"PublicRoute" : {
			"Type" : "AWS::EC2::Route",
			"Properties" : {
				"RouteTableId" : { "Ref" : "RouteTable" },
				"DestinationCidrBlock" : "0.0.0.0/0",
				"GatewayId" : { "Ref" : "InternetGateway" }
			}
		},

		"PrivateRoutePeering" : {
			"Type" : "AWS::EC2::Route",
			"Properties" : {
				"RouteTableId" : { "Ref" : "RouteTable" },
				"DestinationCidrBlock" : "172.31.0.0/16",
				"VpcPeeringConnectionId" : { "Ref" : "VPCPeering" }
			}
		},

		"InternetGateway" : {
			"Type" : "AWS::EC2::InternetGateway"
		},

		"VPCGatewayAttachment" : {
			"Type" : "AWS::EC2::VPCGatewayAttachment",
			"Properties" : {
				"VpcId" : { "Ref" : "VPC" },
				"InternetGatewayId" : { "Ref" : "InternetGateway" }
			}
		},

		"ApiServersASG" : {
			"Type" : "AWS::AutoScaling::AutoScalingGroup",
			"Properties" : {
				"VPCZoneIdentifier" : [ {	"Ref" : "SubnetThree" }, { "Ref" : "SubnetOne" }, { "Ref" : "SubnetTwo" } ],
				"LaunchConfigurationName" : { "Ref" : "ApiServerLaunchConfiguration" },
				"MinSize" : { "Fn::FindInMap" : [ "ScalingMin", { "Ref" : "EnvType" }, "Api"] },
				"MaxSize" : { "Fn::FindInMap" : [ "ScalingMax", { "Ref" : "EnvType" }, "Api"] },
				"TerminationPolicies" : [ "NewestInstance" ],
				"MetricsCollection": [
					{
						"Granularity": "1Minute",
						"Metrics": []
					}],
				"Tags" : [
					{ "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "TeamName" }, { "Ref" : "EnvType" }, "Api", { "Ref" : "BuildNumber" }  ]] }, "PropagateAtLaunch" : "true" },
					{ "Key" : "Environment", "Value" : "Api", "PropagateAtLaunch" : "true" },
					{ "Key" : "EnvironmentType", "Value" : { "Ref" : "EnvType" }, "PropagateAtLaunch" : "true" },
					{ "Key" : "Team", "Value" : "Company", "PropagateAtLaunch" : "true" }
				]
			},
				"CreationPolicy": {
					"AutoScalingCreationPolicy" : {
    				"MinSuccessfulInstancesPercent" : "100"
					},
					"ResourceSignal": {
						"Count": { "Fn::FindInMap" : [ "ScalingMin", { "Ref" : "EnvType" }, "Api" ] },
						"Timeout": "PT10M"
					}
				}
		},

		"BatchServersASG" : {
			"Type" : "AWS::AutoScaling::AutoScalingGroup",
			"Properties" : {
				"VPCZoneIdentifier" : [ {	"Ref" : "SubnetOne" }, { "Ref" : "SubnetTwo" }, { "Ref" : "SubnetThree" } ],
				"LaunchConfigurationName" : { "Ref" : "BatchServerLaunchConfiguration" },
				"MinSize" : { "Fn::FindInMap" : [ "ScalingMin", { "Ref" : "EnvType" }, "Batch"] },
				"MaxSize" : { "Fn::FindInMap" : [ "ScalingMax", { "Ref" : "EnvType" }, "Batch"] },
				"TerminationPolicies" : [ "NewestInstance" ],
				"MetricsCollection": [
					{
						"Granularity": "1Minute",
						"Metrics": []
					}],
				"Tags" : [
					{ "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "TeamName" }, { "Ref" : "EnvType" }, "Batch", { "Ref" : "BuildNumber" }  ]] }, "PropagateAtLaunch" : "true" },
					{ "Key" : "Environment", "Value" : "Batch", "PropagateAtLaunch" : "true" },
					{ "Key" : "EnvironmentType", "Value" : { "Ref" : "EnvType" }, "PropagateAtLaunch" : "true" },
					{ "Key" : "Team", "Value" : "Company", "PropagateAtLaunch" : "true" }
					]
				},
				"CreationPolicy" : {
					"AutoScalingCreationPolicy" : {
    				"MinSuccessfulInstancesPercent" : "100"
					},
					"ResourceSignal" : {
						"Count": { "Fn::FindInMap" : [ "ScalingMin", { "Ref" : "EnvType" }, "Batch" ] },
						"Timeout": "PT10M"
					}
				}
			},

				"AnalyticsServersASG" : {
					"Type" : "AWS::AutoScaling::AutoScalingGroup",
					"Properties" : {
						"VPCZoneIdentifier" : [ {	"Ref" : "SubnetTwo" }, { "Ref" : "SubnetOne"} , { "Ref" : "SubnetThree" } ],
						"LaunchConfigurationName" : { "Ref" : "AnalyticsServerLaunchConfiguration" },
						"MinSize" : { "Fn::FindInMap" : [ "ScalingMin", { "Ref" : "EnvType" }, "Analytics" ] },
						"MaxSize" : { "Fn::FindInMap" : [ "ScalingMax", { "Ref" : "EnvType" }, "Analytics" ] },
						"TerminationPolicies" : [ "NewestInstance" ],
						"MetricsCollection": [
							{
								"Granularity": "1Minute",
								"Metrics": []
							}
						],
						"Tags" : [
							{ "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "TeamName" }, { "Ref" : "EnvType" }, "Analytics", { "Ref" : "BuildNumber" }  ]] }, "PropagateAtLaunch" : "true" },
							{ "Key" : "Environment", "Value" : "Analytics", "PropagateAtLaunch" : "true" },
							{ "Key" : "EnvironmentType", "Value" : { "Ref" : "EnvType" }, "PropagateAtLaunch" : "true" },
							{ "Key" : "Team", "Value" : "Company", "PropagateAtLaunch" : "true" }
						]
					},
				"CreationPolicy": {
					"AutoScalingCreationPolicy" : {
						"MinSuccessfulInstancesPercent" : "100"
					},
					"ResourceSignal": {
						"Count": { "Fn::FindInMap" : [ "ScalingMin", { "Ref" : "EnvType" }, "Analytics" ] },
						"Timeout": "PT10M"
					}
				}
			},

			"CassandraServersASG" : {
				"Type" : "AWS::AutoScaling::AutoScalingGroup",
				"Properties" : {
					"VPCZoneIdentifier" : [ {	"Ref" : "SubnetTwo" }, { "Ref" : "SubnetOne"} , { "Ref" : "SubnetThree" } ],
					"LaunchConfigurationName" : { "Ref" : "CassandraLaunchConfiguration" },
					"MinSize" : { "Fn::FindInMap" : [ "ScalingMin", { "Ref" : "EnvType" }, "Cassandra"] },
					"MaxSize" : { "Fn::FindInMap" : [ "ScalingMax", { "Ref" : "EnvType" }, "Cassandra"] },
					"TerminationPolicies" : [ "NewestInstance" ],
					"MetricsCollection": [
						{
							"Granularity": "1Minute",
							"Metrics": []
						}
					],
					"Tags" : [
					{ "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "TeamName" },{ "Ref" : "EnvType" }, "Cassandra", { "Ref" : "BuildNumber" }  ]] }, "PropagateAtLaunch" : "true" },
					{ "Key" : "Environment", "Value" : "Cassandra", "PropagateAtLaunch" : "true" },
					{ "Key" : "EnvironmentType", "Value" : { "Ref" : "EnvType" }, "PropagateAtLaunch" : "true" },
					{ "Key" : "Team", "Value" : "Company", "PropagateAtLaunch" : "true" }
					]
				},
				"CreationPolicy": {
					"AutoScalingCreationPolicy" : {
						"MinSuccessfulInstancesPercent" : "100"
					},
					"ResourceSignal": {
						"Count": { "Fn::FindInMap" : [ "ScalingMin", { "Ref" : "EnvType" }, "Cassandra" ] },
						"Timeout": "PT10M"
					}
				}
			},

			"BastionServersASG" : {
				"Type" : "AWS::AutoScaling::AutoScalingGroup",
				"DependsOn" : "CassandraServersASG",
				"Properties" : {
					"VPCZoneIdentifier" : [ {	"Ref" : "SubnetTwo" }, { "Ref" : "SubnetOne"} , { "Ref" : "SubnetThree" } ],
					"LaunchConfigurationName" : { "Ref" : "BastionServerLaunchConfiguration" },
					"MinSize" : { "Fn::FindInMap" : [ "ScalingMin", { "Ref" : "EnvType" }, "Bastion"] },
					"MaxSize" : { "Fn::FindInMap" : [ "ScalingMax", { "Ref" : "EnvType" }, "Bastion"] },
					"TerminationPolicies" : [ "NewestInstance" ],
					"MetricsCollection": [
						{
							"Granularity": "1Minute",
							"Metrics": []
						}
					],
					"Tags" : [
						{ "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "TeamName" }, { "Ref" : "EnvType" }, "Bastion", { "Ref" : "BuildNumber" }  ]] }, "PropagateAtLaunch" : "true" },
						{ "Key" : "Environment", "Value" : "Bastion", "PropagateAtLaunch" : "true" },
						{ "Key" : "EnvironmentType", "Value" : { "Ref" : "EnvType" }, "PropagateAtLaunch" : "true" },
						{ "Key" : "Team", "Value" : "Company", "PropagateAtLaunch" : "true" }
					]
				},
			"CreationPolicy": {
				"AutoScalingCreationPolicy" : {
					"MinSuccessfulInstancesPercent" : "0"
				},
				"ResourceSignal": {
					"Count": { "Fn::FindInMap" : [ "ScalingMin", { "Ref" : "EnvType" }, "Bastion" ] },
					"Timeout": "PT10M"
				}
			}
		},

			"ApiScaleUpPolicy" : {
				"Type" : "AWS::AutoScaling::ScalingPolicy",
				"Properties" : {
					"AdjustmentType" : "ChangeInCapacity",
					"AutoScalingGroupName" : { "Ref" : "ApiServersASG" },
					"Cooldown" : "1",
					"ScalingAdjustment" : "1"
				}
			},

			"ApiScaleDownPolicy" : {
				"Type" : "AWS::AutoScaling::ScalingPolicy",
				"Properties" : {
					"AdjustmentType" : "ChangeInCapacity",
					"AutoScalingGroupName" : { "Ref" : "ApiServersASG" },
					"Cooldown" : "1",
					"ScalingAdjustment" : "-1"
				}
			},

			"BatchScaleUpPolicy" : {
				"Type" : "AWS::AutoScaling::ScalingPolicy",
				"Properties" : {
					"AdjustmentType" : "ChangeInCapacity",
					"AutoScalingGroupName" : { "Ref" : "BatchServersASG" },
					"Cooldown" : "1",
					"ScalingAdjustment" : "1"
				}
			},

			"BatchScaleDownPolicy" : {
				"Type" : "AWS::AutoScaling::ScalingPolicy",
				"Properties" : {
					"AdjustmentType" : "ChangeInCapacity",
					"AutoScalingGroupName" : { "Ref" : "BatchServersASG" },
					"Cooldown" : "1",
					"ScalingAdjustment" : "-1"
				}
			},

			"AnalyticsScaleUpPolicy" : {
				"Type" : "AWS::AutoScaling::ScalingPolicy",
				"Properties" : {
					"AdjustmentType" : "ChangeInCapacity",
					"AutoScalingGroupName" : { "Ref" : "AnalyticsServersASG" },
					"Cooldown" : "1",
					"ScalingAdjustment" : "1"
				}
			},

			"AnalyticsScaleDownPolicy" : {
				"Type" : "AWS::AutoScaling::ScalingPolicy",
				"Properties" : {
					"AdjustmentType" : "ChangeInCapacity",
					"AutoScalingGroupName" : { "Ref" : "AnalyticsServersASG" },
					"Cooldown" : "1",
					"ScalingAdjustment" : "-1"
				}
			},

			"CassandraScaleUpPolicy" : {
				"Type" : "AWS::AutoScaling::ScalingPolicy",
					"Properties" : {
					"AdjustmentType" : "ChangeInCapacity",
					"AutoScalingGroupName" : { "Ref" : "CassandraServersASG" },
					"Cooldown" : "1",
					"ScalingAdjustment" : "2"
				}
			},

			"CassandraScaleDownPolicy" : {
				"Type" : "AWS::AutoScaling::ScalingPolicy",
					"Properties" : {
					"AdjustmentType" : "ChangeInCapacity",
					"AutoScalingGroupName" : { "Ref" : "CassandraServersASG" },
					"Cooldown" : "1",
					"ScalingAdjustment" : "-2"
				}
			},

			"ApiCPUAlarmHigh": {
				"Type": "AWS::CloudWatch::Alarm",
				"Properties": {
					"EvaluationPeriods": "2",
					"Statistic": "Average",
					"Threshold": "5",
					"AlarmDescription": "Scale up if CPU is higher than 5 for 2x 5 minutes",
					"Period": "300",
					"AlarmActions": [ { "Ref" : "ApiScaleUpPolicy"} ],
					"Namespace": "AWS/EC2",
					"Dimensions": [ {
							"Name": "AutoScalingGroupName",
							"Value": { "Ref": "ApiServersASG" }
						} ],
					"ComparisonOperator": "GreaterThanOrEqualToThreshold",
					"MetricName": "CPUUtilization"
				}
			},

			"BatchCPUAlarmHigh": {
				"Type": "AWS::CloudWatch::Alarm",
				"Properties": {
					"EvaluationPeriods": "1",
					"Statistic": "Average",
					"Threshold": "2.3",
					"AlarmDescription": "Scale up if CPU is higher than 2.3 for 5 minutes",
					"Period": "300",
					"AlarmActions": [ { "Ref" : "BatchScaleUpPolicy"} ],
					"Namespace": "AWS/EC2",
					"Dimensions": [ {
						"Name": "AutoScalingGroupName",
						"Value": { "Ref" : "BatchServersASG" }
					} ],
					"ComparisonOperator": "GreaterThanOrEqualToThreshold",
					"MetricName": "CPUUtilization"
				}
			},

			"AnalyticsCPUAlarmHigh": {
				"Type": "AWS::CloudWatch::Alarm",
				"Properties": {
					"EvaluationPeriods": "1",
					"Statistic": "Average",
					"Threshold": "2.3",
					"AlarmDescription": "Scale up if CPU is higher than 2.3 for 5 minutes",
					"Period": "300",
					"AlarmActions": [ { "Ref": "AnalyticsScaleUpPolicy" } ],
					"Namespace": "AWS/EC2",
					"Dimensions": [ {
						"Name": "AutoScalingGroupName",
						"Value": { "Ref" : "AnalyticsServersASG"}
					} ],
					"ComparisonOperator": "GreaterThanOrEqualToThreshold",
					"MetricName": "CPUUtilization"
				}
			},

			"CassandraCPUAlarmHigh": {
				"Type": "AWS::CloudWatch::Alarm",
				"Properties": {
					"EvaluationPeriods": "2",
					"Statistic": "Average",
					"Threshold": "5",
					"AlarmDescription": "Scale up if CPU is higher than 5 for 2x 5 minutes",
					"Period": "300",
					"AlarmActions": [ { "Ref": "CassandraScaleUpPolicy" } ],
					"Namespace": "AWS/EC2",
					"Dimensions": [ {
						"Name": "AutoScalingGroupName",
						"Value": { "Ref" : "CassandraServersASG"}
					} ],
					"ComparisonOperator": "GreaterThanOrEqualToThreshold",
					"MetricName": "CPUUtilization"
				}
			},

			"ApiCPUAlarmNormal": {
				"Type": "AWS::CloudWatch::Alarm",
				"Properties": {
					"EvaluationPeriods": "2",
					"Statistic": "Average",
					"Threshold": "3",
					"AlarmDescription": "Scale down if CPU goes below 3 for 2x 5 mins",
					"Period": "300",
					"AlarmActions": [ { "Ref" : "ApiScaleDownPolicy"} ],
					"Namespace": "AWS/EC2",
					"Dimensions": [ {
					"Name": "AutoScalingGroupName",
					"Value": { "Ref": "ApiServersASG" }
					} ],
					"ComparisonOperator": "LessThanOrEqualToThreshold",
					"MetricName": "CPUUtilization"
				}
			},

			"BatchCPUAlarmNormal": {
				"Type": "AWS::CloudWatch::Alarm",
				"Properties": {
					"EvaluationPeriods": "1",
					"Statistic": "Average",
					"Threshold": "2.2",
					"AlarmDescription": "Scale down if CPU goes below 2.2",
					"Period": "300",
					"AlarmActions": [ { "Ref" : "BatchScaleDownPolicy"} ],
					"Namespace": "AWS/EC2",
					"Dimensions": [ {
						"Name": "AutoScalingGroupName",
						"Value": { "Ref" : "BatchServersASG" }
					} ],
					"ComparisonOperator": "LessThanOrEqualToThreshold",
					"MetricName": "CPUUtilization"
				}
			},

			"AnalyticsCPUAlarmNormal": {
				"Type": "AWS::CloudWatch::Alarm",
				"Properties": {
					"EvaluationPeriods": "1",
					"Statistic": "Average",
					"Threshold": "2.2",
					"AlarmDescription": "Scale down if CPU goes below 2.2",
					"Period": "300",
					"AlarmActions": [ { "Ref": "AnalyticsScaleDownPolicy" } ],
					"Namespace": "AWS/EC2",
					"Dimensions": [ {
						"Name": "AutoScalingGroupName",
						"Value": { "Ref" : "AnalyticsServersASG" }
					} ],
					"ComparisonOperator": "LessThanOrEqualToThreshold",
					"MetricName": "CPUUtilization"
				}
			},

			"CassandraCPUAlarmNormal": {
				"Type": "AWS::CloudWatch::Alarm",
				"Properties": {
					"EvaluationPeriods": "2",
					"Statistic": "Average",
					"Threshold": "3",
					"AlarmDescription": "Scale down if CPU goes below 3 for 2x 5 minutes",
					"Period": "300",
					"AlarmActions": [ { "Ref": "CassandraScaleDownPolicy" } ],
					"Namespace": "AWS/EC2",
					"Dimensions": [ {
						"Name": "AutoScalingGroupName",
						"Value": { "Ref" : "CassandraServersASG"}
					} ],
					"ComparisonOperator": "GreaterThanOrEqualToThreshold",
					"MetricName": "CPUUtilization"
				}
			},

			"Latency": {
				"Type" : "AWS::CloudWatch::Alarm",
				"Properties" : {
					"AlarmDescription" : "Alarm for ELB Latency Metric",
					"ComparisonOperator" : "GreaterThanOrEqualToThreshold",
					"EvaluationPeriods": "3",
					"Statistic": "Minimum",
					"MetricName": "Latency",
					"Namespace": "AWS/ELB",
					"Period": "60",
					"Threshold": "90",
					"Dimensions" : [ {
						"Name" : "LoadBalancerName",
						"Value" : { "Ref" : "ApiLoadBalancer" }
					} ]
				}
			},

			"SurgeQueueLength": {
				"Type" : "AWS::CloudWatch::Alarm",
				"Properties" : {
					"AlarmDescription" : "Alarm for ELB SurgeQueueLength Metric",
					"ComparisonOperator" : "GreaterThanOrEqualToThreshold",
					"EvaluationPeriods": "3",
					"Statistic": "Minimum",
					"MetricName": "SurgeQueueLength",
					"Namespace": "AWS/ELB",
					"Period": "60",
					"Threshold": "90",
					"Dimensions" : [ {
						"Name" : "LoadBalancerName",
						"Value" : { "Ref" : "ApiLoadBalancer" }
					} ]
				}
			},

			"SpilloverCount": {
				"Type" : "AWS::CloudWatch::Alarm",
				"Properties" : {
					"AlarmDescription" : "Alarm for ELB SpilloverCount Metric",
					"ComparisonOperator" : "GreaterThanOrEqualToThreshold",
					"EvaluationPeriods": "3",
					"Statistic": "Minimum",
					"MetricName": "SpilloverCount",
					"Namespace": "AWS/ELB",
					"Period": "60",
					"Threshold": "90",
					"Dimensions" : [ {
						"Name" : "LoadBalancerName",
						"Value" : { "Ref" : "ApiLoadBalancer" }
					} ]
				}
			},

			"HTTPCodeELB4XX": {
				"Type" : "AWS::CloudWatch::Alarm",
				"Properties" : {
					"AlarmDescription" : "Alarm for ELB HTTPCode_ELB_4XX Metric",
					"ComparisonOperator" : "GreaterThanOrEqualToThreshold",
					"EvaluationPeriods": "3",
					"Statistic": "Minimum",
					"MetricName": "HTTPCode_ELB_4XX",
					"Namespace": "AWS/ELB",
					"Period": "60",
					"Threshold": "90",
					"Dimensions" : [ {
						"Name" : "LoadBalancerName",
						"Value" : { "Ref" : "ApiLoadBalancer" }
					} ]
				}
			},

			"HTTPCodeELB5XX": {
				"Type" : "AWS::CloudWatch::Alarm",
				"Properties" : {
					"AlarmDescription" : "Alarm for ELB HTTPCode_ELB_5XX Metric",
					"ComparisonOperator" : "GreaterThanOrEqualToThreshold",
					"EvaluationPeriods": "3",
					"Statistic": "Minimum",
					"MetricName": "HTTPCode_ELB_5XX",
					"Namespace": "AWS/ELB",
					"Period": "60",
					"Threshold": "90",
					"Dimensions" : [ {
						"Name" : "LoadBalancerName",
						"Value" : { "Ref" : "ApiLoadBalancer" }
					} ]
				}
			},

			"HTTPCodeBackend2XX": {
				"Type" : "AWS::CloudWatch::Alarm",
				"Properties" : {
					"AlarmDescription" : "Alarm for ELB HTTPCode_Backend_2XX Metric",
					"ComparisonOperator" : "GreaterThanOrEqualToThreshold",
					"EvaluationPeriods": "3",
					"Statistic": "Minimum",
					"MetricName": "HTTPCode_Backend_2XX",
					"Namespace": "AWS/ELB",
					"Period": "60",
					"Threshold": "90",
					"Dimensions" : [ {
						"Name" : "LoadBalancerName",
						"Value" : { "Ref" : "ApiLoadBalancer" }
					} ]
				}
			},

			"HTTPCodeBackend3XX": {
				"Type" : "AWS::CloudWatch::Alarm",
				"Properties" : {
					"AlarmDescription" : "Alarm for ELB HTTPCode_Backend_3XX Metric",
					"ComparisonOperator" : "GreaterThanOrEqualToThreshold",
					"EvaluationPeriods": "3",
					"Statistic": "Minimum",
					"MetricName": "HTTPCode_Backend_3XX",
					"Namespace": "AWS/ELB",
					"Period": "60",
					"Threshold": "90",
					"Dimensions" : [ {
						"Name" : "LoadBalancerName",
						"Value" : { "Ref" : "ApiLoadBalancer" }
					} ]
				}
			},

			"HTTPCodeBackend4XX": {
				"Type" : "AWS::CloudWatch::Alarm",
				"Properties" : {
					"AlarmDescription" : "Alarm for ELB HTTPCode_Backend_4XX Metric",
					"ComparisonOperator" : "GreaterThanOrEqualToThreshold",
					"EvaluationPeriods": "3",
					"Statistic": "Minimum",
					"MetricName": "HTTPCode_Backend_4XX",
					"Namespace": "AWS/ELB",
					"Period": "60",
					"Threshold": "90",
					"Dimensions" : [ {
						"Name" : "LoadBalancerName",
						"Value" : { "Ref" : "ApiLoadBalancer" }
					} ]
				}
			},

			"HTTPCodeBackend5XX": {
				"Type" : "AWS::CloudWatch::Alarm",
				"Properties" : {
					"AlarmDescription" : "Alarm for ELB HTTPCode_Backend_5XX Metric",
					"ComparisonOperator" : "GreaterThanOrEqualToThreshold",
					"EvaluationPeriods": "3",
					"Statistic": "Minimum",
					"MetricName": "HTTPCode_Backend_5XX",
					"Namespace": "AWS/ELB",
					"Period": "60",
					"Threshold": "90",
					"Dimensions" : [ {
						"Name" : "LoadBalancerName",
						"Value" : { "Ref" : "ApiLoadBalancer" }
					} ]
				}
			},

			"BackendConnectionErrors": {
				"Type" : "AWS::CloudWatch::Alarm",
				"Properties" : {
					"AlarmDescription" : "Alarm for ELB BackendConnectionErrors Metric",
					"ComparisonOperator" : "GreaterThanOrEqualToThreshold",
					"EvaluationPeriods": "3",
					"Statistic": "Minimum",
					"MetricName": "BackendConnectionErrors",
					"Namespace": "AWS/ELB",
					"Period": "60",
					"Threshold": "90",
					"Dimensions" : [ {
						"Name" : "LoadBalancerName",
						"Value" : { "Ref" : "ApiLoadBalancer" }
					} ]
				}
			},

			"ELBTargetGroup" : {
				"Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
				"Properties" : {
					"HealthCheckIntervalSeconds" : "6",
					"HealthCheckPath" : "/api/v1/version",
					"HealthCheckProtocol" : "HTTP",
					"HealthCheckTimeoutSeconds" : "5",
					"HealthyThresholdCount" : "5",
					"Matcher" : { "HttpCode" : "200" },
					"Name" : { "Fn::Join" : [ "-", [ { "Ref" : "EnvType" }, "api", { "Ref" : "VPC" } ] ] },
					"Port" : "8080",
					"Protocol" : "HTTP",
					"TargetGroupAttributes" : [
						{ "Key" : "stickiness.enabled", "Value" : "false" },
						{ "Key" : "deregistration_delay.timeout_seconds", "Value" : "60" }
					],
					"TargetType" : "instance",
					"UnhealthyThresholdCount" : "3",
					"VpcId" : { "Ref" : "VPC" }
				}
			},

			"ELBListener443" : {
				"Type" : "AWS::ElasticLoadBalancingV2::Listener",
				"Properties" : {
					"Certificates" : [ {
						"CertificateArn" : { "Fn::FindInMap" : [ "CertificatesArn", { "Ref" : "EnvType" }, "certificateArn" ] }
					} ],
					"DefaultActions" : [ {
						"TargetGroupArn" : { "Ref" : "ELBTargetGroup" },
						"Type" : "forward"
						}
					],
					"LoadBalancerArn" : { "Ref" : "ApiLoadBalancer" },
					"Port" : "443",
					"Protocol" : "HTTPS",
					"SslPolicy" : "ELBSecurityPolicy-2016-08"
				}
			},

			"ELBListener8080" : {
				"Type" : "AWS::ElasticLoadBalancingV2::Listener",
				"Properties" : {
					"DefaultActions" : [ {
						"TargetGroupArn" : { "Ref" : "ELBTargetGroup" },
						"Type" : "forward"
					}
				],
					"LoadBalancerArn" : { "Ref" : "ApiLoadBalancer" },
					"Port" : "8080",
					"Protocol" : "HTTP"
				}
			},

			"ASGPilot": {
				"Type": "AWS::EC2::SecurityGroup",
				"Properties": {
					"GroupDescription": "AS Pilot - created by CloudFormation",
					"VpcId" : { "Ref" : "VPC" },
					"SecurityGroupIngress" : [
					{ "IpProtocol" : "tcp", "FromPort" : "4100", "ToPort" : "4100", "CidrIp" : "0.0.0.0/0" },
					{ "IpProtocol" : "tcp", "FromPort" : "9001", "ToPort" : "9001", "CidrIp" : "0.0.0.0/0" },
					{ "IpProtocol" : "tcp", "FromPort" : "9004", "ToPort" : "9004", "CidrIp" : "0.0.0.0/0" },
					{ "IpProtocol" : "tcp", "FromPort" : "9003", "ToPort" : "9003", "CidrIp" : "0.0.0.0/0" },
					{ "IpProtocol" : "tcp", "FromPort" : "6379", "ToPort" : "6379", "CidrIp" : "0.0.0.0/0" },
					{ "IpProtocol" : "tcp", "FromPort" : "4080", "ToPort" : "4080", "CidrIp" : "0.0.0.0/0" },
					{ "IpProtocol" : "tcp", "FromPort" : "10001", "ToPort" : "10001", "CidrIp" : "0.0.0.0/0" },
					{ "IpProtocol" : "-1", "CidrIp" : "172.31.0.0/16" },
					{ "IpProtocol" : "tcp", "FromPort" : "9200", "ToPort" : "9200", "CidrIp" : { "Fn::GetAtt" : [ "VPC", "CidrBlock" ]} },
					{ "IpProtocol" : "tcp", "FromPort" : "9042", "ToPort" : "9042", "CidrIp" : { "Fn::GetAtt" : [ "VPC", "CidrBlock" ]} },
					{ "IpProtocol" : "tcp", "FromPort" : "7199", "ToPort" : "7199", "CidrIp" : { "Fn::GetAtt" : [ "VPC", "CidrBlock" ]} },
					{ "IpProtocol" : "tcp", "FromPort" : "9160", "ToPort" : "9160", "CidrIp" : { "Fn::GetAtt" : [ "VPC", "CidrBlock" ]} },
					{ "IpProtocol" : "tcp", "FromPort" : "0", "ToPort" : "65535", "CidrIp" : { "Fn::GetAtt" : [ "VPC", "CidrBlock" ]} },
					{ "IpProtocol" : "icmp", "FromPort" : "8", "ToPort" : "-1", "CidrIp" : { "Fn::GetAtt" : [ "VPC", "CidrBlock" ]} }
					]
				}
			},

			"ELBSG" : {
				"Type": "AWS::EC2::SecurityGroup",
				"Properties": {
					"GroupDescription": "ELB SG - created by CloudFormation",
					"VpcId" : { "Ref" : "VPC" },
					"SecurityGroupIngress" : [
					{ "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0" },
					{ "IpProtocol" : "tcp", "FromPort" : "8080", "ToPort" : "8080", "CidrIp" : "0.0.0.0/0" },
					{ "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0" }
					]
				}
			},

			"BastionSG": {
				"Type": "AWS::EC2::SecurityGroup",
				"Properties": {
					"GroupDescription": "BastionSG - created by CloudFormation",
					"VpcId" : { "Ref" : "VPC" },
					"SecurityGroupIngress" : [
						{ "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0" }
					],
					"SecurityGroupEgress" : [
						{ "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0" },
						{ "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0" },
						{ "IpProtocol" : "-1", "CidrIp" : { "Fn::GetAtt" : [ "VPC", "CidrBlock" ] } }
					]
				}
			},

			"RDSSG": {
				"Type": "AWS::EC2::SecurityGroup",
				"Properties": {
					"GroupDescription": "RDSSG - created by CloudFormation",
					"VpcId" : { "Ref" : "VPC" },
					"SecurityGroupIngress" : [
						{ "IpProtocol" : "tcp", "FromPort" : "3306", "ToPort" : "3306", "CidrIp" : { "Fn::GetAtt" : [ "VPC", "CidrBlock" ] } }
					],
					"SecurityGroupEgress" : [
						{ "IpProtocol" : "tcp", "FromPort" : "3306", "ToPort" : "3306", "CidrIp" : { "Fn::GetAtt" : [ "VPC", "CidrBlock" ] } }
					]
				}
			},

			"ApiServerLaunchConfiguration" : {
				"Type" : "AWS::AutoScaling::LaunchConfiguration",
				"Properties" : {
				"ImageId" : { "Fn::FindInMap" : [ "AMIMap", { "Ref" : "AWS::Region" }, "64" ]},
				"InstanceType" : { "Ref" : "ApiInstanceType" },
				"KeyName" : { "Fn::FindInMap" : [ "KeyPairMap", { "Ref" : "EnvType" }, "kp" ]},
				"AssociatePublicIpAddress" : "true",
				"SecurityGroups" : [ { "Ref" : "ASGPilot" } ],
				"UserData" : {
				"Fn::Base64" : {
					"Fn::Join" : ["\n", [
						"#!/bin/bash -x",
						"exec >& /var/log/cloud-output.log",
						"mkdir -p /usr/local/company",
						{ "Fn::Join": [ " \\\n", [
							"curl -s --retry 30",
							{"Fn::Join" : [ "", [ "https://s3-us-west-2.amazonaws.com/company-ci-files/userdata/userdata_script_v",{ "Ref" : "UserScriptVersion" },".sh" ]]},
							"| type=server",
							{ "Fn::Join": [ "=", [ "envtype", { "Ref" : "EnvType" } ] ] },
							{ "Fn::Join": [ "=", [ "envname", "Api" ] ] },
							{ "Fn::Join": [ "=", [ "buildnumber", { "Ref" : "BuildNumber" } ] ] },
							{ "Fn::Join": [ "=", [ "teamname", { "Ref": "TeamName" } ] ] },
							{ "Fn::Join": [ "=", [ "vpcid", { "Ref": "VPC" } ] ] },
							{ "Fn::Join": [ "=", [ "region", { "Ref": "Region" } ] ] },
							{ "Fn::Join": [ "=", [ "hostedzoneid", { "Ref" : "VPCHostedZone" } ] ] },
							{ "Fn::Join": [ "=", [ "targetgrouparn", { "Ref" : "ELBTargetGroup" } ] ] },
							{ "Fn::Join": [ "=", [ "analyticsnodes", { "Fn::FindInMap" : [ "ScalingMin" , { "Ref" : "EnvType" }, "Analytics" ] } ] ] },
							{ "Fn::Join": [ "=", [ "mysql_server", { "Fn::GetAtt" : [ "ASRDSdb", "Endpoint.Address" ] } ] ] },
							{ "Fn::Join": [ "=", [ "elbname", { "Fn::GetAtt" : [ "ApiLoadBalancer", "LoadBalancerName" ] } ] ] },
							{ "Fn::Join": [ "=", [ "dbscheme", { "Fn::FindInMap" : [ "LiquiBase", { "Ref" : "EnvType" }, "dbscheme" ] } ] ] },
							{ "Fn::Join": [ "=", [ "dbadminuser", { "Fn::FindInMap" : [ "LiquiBase", { "Ref" : "EnvType" }, "dbadminuser" ] } ] ] },
							{ "Fn::Join": [ "=", [ "dbpass", { "Fn::FindInMap" : [ "LiquiBase", { "Ref" : "EnvType" }, "dbpass" ] } ] ] },
							{ "Fn::Join": [ "=", [ "cassandraUser", { "Fn::FindInMap" : [ "LiquiBase", { "Ref" : "EnvType" }, "cassandraUser" ] } ] ] },
							{ "Fn::Join": [ "=", [ "cassandraPassword", { "Fn::FindInMap" : [ "LiquiBase", { "Ref" : "EnvType" }, "cassandraPassword" ] } ] ] },
							"bash"
						]]},
						{ "Fn::Join": [ " \\\n", [
							"/opt/aws/bin/cfn-signal -e $? ",
							"  --stack ", { "Ref": "AWS::StackName" },
							"  --resource ApiServersASG " ,
							"  --region ", { "Ref" : "AWS::Region" }
						]]}
					]]}}
			}
		},

			"BatchServerLaunchConfiguration" : {
				"Type" : "AWS::AutoScaling::LaunchConfiguration",
				"Properties" : {
				"ImageId" : { "Fn::FindInMap" : [ "AMIMap", { "Ref" : "AWS::Region" }, "64" ]},
				"InstanceType" : { "Ref" : "BatchInstanceType" },
				"KeyName" : { "Fn::FindInMap" : [ "KeyPairMap", { "Ref" : "EnvType" }, "kp" ]},
				"AssociatePublicIpAddress" : "true",
				"SecurityGroups" : [ { "Ref" : "ASGPilot" } ],
				"UserData" : {
				"Fn::Base64" : {
					"Fn::Join" : ["\n", [
						"#!/bin/bash -x",
						"exec >& /var/log/cloud-output.log",
						"mkdir -p /usr/local/company",
						{ "Fn::Join": [ " \\\n", [
							"curl -s --retry 30",
							{"Fn::Join" : [ "", [ "https://s3-us-west-2.amazonaws.com/company-ci-files/userdata/userdata_script_v",{ "Ref" : "UserScriptVersion" },".sh" ]]},
							"| type=server",
							{ "Fn::Join": [ "=", [ "envtype", { "Ref" : "EnvType" } ] ] },
							{ "Fn::Join": [ "=", [ "envname", "Batch" ] ] },
							{ "Fn::Join": [ "=", [ "buildnumber", { "Ref" : "BuildNumber" } ] ] },
							{ "Fn::Join": [ "=", [ "teamname", { "Ref": "TeamName" } ] ] },
							{ "Fn::Join": [ "=", [ "vpcid", { "Ref": "VPC" } ] ] },
							{ "Fn::Join": [ "=", [ "region", { "Ref": "Region" } ] ] },
							{ "Fn::Join": [ "=", [ "hostedzoneid", { "Ref" : "VPCHostedZone" } ] ] },
							{ "Fn::Join": [ "=", [ "mysql_server", { "Fn::GetAtt" : [ "ASRDSdb", "Endpoint.Address" ] } ] ] },
							{ "Fn::Join": [ "=", [ "elbname", { "Fn::GetAtt" : [ "ApiLoadBalancer", "LoadBalancerName" ] } ] ] },
							{ "Fn::Join": [ "=", [ "analyticsnodes", { "Fn::FindInMap" : [ "ScalingMin" , { "Ref" : "EnvType" }, "Analytics" ] } ] ] },
							{ "Fn::Join": [ "=", [ "dbscheme", { "Fn::FindInMap" : [ "LiquiBase", { "Ref" : "EnvType" }, "dbscheme" ] } ] ] },
							{ "Fn::Join": [ "=", [ "dbadminuser", { "Fn::FindInMap" : [ "LiquiBase", { "Ref" : "EnvType" }, "dbadminuser" ] } ] ] },
							{ "Fn::Join": [ "=", [ "dbpass", { "Fn::FindInMap" : [ "LiquiBase", { "Ref" : "EnvType" }, "dbpass" ] } ] ] },
							{ "Fn::Join": [ "=", [ "cassandraUser", { "Fn::FindInMap" : [ "LiquiBase", { "Ref" : "EnvType" }, "cassandraUser" ] } ] ] },
							{ "Fn::Join": [ "=", [ "cassandraPassword", { "Fn::FindInMap" : [ "LiquiBase", { "Ref" : "EnvType" }, "cassandraPassword" ] } ] ] },
							"bash"
						]]},
						{ "Fn::Join": [ " \\\n", [
							"/opt/aws/bin/cfn-signal -e $? ",
							"  --stack ", { "Ref": "AWS::StackName" },
							"  --resource BatchServersASG " ,
							"  --region ", { "Ref" : "AWS::Region" }
						]]}
					]]}}
			}
		},

			"AnalyticsServerLaunchConfiguration" : {
				"Type" : "AWS::AutoScaling::LaunchConfiguration",
				"Properties" : {
				"ImageId" : { "Fn::FindInMap" : [ "AMIMap", { "Ref" : "AWS::Region" }, "64" ]},
				"InstanceType" : { "Ref" : "AnalyticsInstanceType" },
				"KeyName" : { "Fn::FindInMap" : [ "KeyPairMap", { "Ref" : "EnvType" }, "kp" ]},
				"AssociatePublicIpAddress" : "true",
				"SecurityGroups" : [ { "Ref" : "ASGPilot" } ],
				"UserData" : {
				"Fn::Base64" : {
					"Fn::Join" : ["\n", [
						"#!/bin/bash -x",
						"exec >& /var/log/cloud-output.log",
						"mkdir -p /usr/local/company",
						{ "Fn::Join": [ " \\\n", [
							"curl -s --retry 30",
							{"Fn::Join" : [ "", [ "https://s3-us-west-2.amazonaws.com/company-ci-files/userdata/userdata_script_v",{ "Ref" : "UserScriptVersion" },".sh" ]]},
							"| type=server",
							{ "Fn::Join": [ "=", [ "envtype", { "Ref" : "EnvType" } ] ] },
							{ "Fn::Join": [ "=", [ "envname", "Analytics" ] ] },
							{ "Fn::Join": [ "=", [ "stackname", { "Ref" : "AWS::StackName" } ] ] },
							{ "Fn::Join": [ "=", [ "buildnumber", { "Ref" : "BuildNumber" } ] ] },
							{ "Fn::Join": [ "=", [ "teamname", { "Ref": "TeamName" } ] ] },
							{ "Fn::Join": [ "=", [ "vpcid", { "Ref": "VPC" } ] ] },
							{ "Fn::Join": [ "=", [ "region", { "Ref": "Region" } ] ] },
							{ "Fn::Join": [ "=", [ "hostedzoneid", { "Ref" : "VPCHostedZone" } ] ] },
							{ "Fn::Join": [ "=", [ "analyticsnodes", { "Fn::FindInMap" : [ "ScalingMin" , { "Ref" : "EnvType" }, "Analytics" ] } ] ] },
							{ "Fn::Join": [ "=", [ "mysql_server", { "Fn::GetAtt" : [ "ASRDSdb", "Endpoint.Address" ] } ] ] },
							{ "Fn::Join": [ "=", [ "elbname", { "Fn::GetAtt" : [ "ApiLoadBalancer", "LoadBalancerName" ] } ] ] },
							{ "Fn::Join": [ "=", [ "dbscheme", { "Fn::FindInMap" : [ "LiquiBase", { "Ref" : "EnvType" }, "dbscheme" ] } ] ] },
							{ "Fn::Join": [ "=", [ "dbadminuser", { "Fn::FindInMap" : [ "LiquiBase", { "Ref" : "EnvType" }, "dbadminuser" ] } ] ] },
							{ "Fn::Join": [ "=", [ "dbpass", { "Fn::FindInMap" : [ "LiquiBase", { "Ref" : "EnvType" }, "dbpass" ] } ] ] },
							{ "Fn::Join": [ "=", [ "cassandraUser", { "Fn::FindInMap" : [ "LiquiBase", { "Ref" : "EnvType" }, "cassandraUser" ] } ] ] },
							{ "Fn::Join": [ "=", [ "cassandraPassword", { "Fn::FindInMap" : [ "LiquiBase", { "Ref" : "EnvType" }, "cassandraPassword" ] } ] ] },
							"bash"
						]]},
						{ "Fn::Join": [ " \\\n", [
							"/opt/aws/bin/cfn-signal -e $? ",
							"  --stack ", { "Ref": "AWS::StackName" },
							"  --resource AnalyticsServersASG" ,
							"  --region ", { "Ref" : "AWS::Region" }
						]]}
					]]}}
			}
		},

			"CassandraLaunchConfiguration" : {
				"Type" : "AWS::AutoScaling::LaunchConfiguration",
				"Properties" : {
				"ImageId" : { "Fn::FindInMap" : [ "CassAmi", { "Ref" : "Region" }, "64" ]},
				"InstanceType" : { "Ref" : "CassandraInstanceType" },
				"BlockDeviceMappings" : [
					{
					"DeviceName" : "/dev/sdf",
					"Ebs" : { "VolumeSize" : "500" }
					}
				],
				"KeyName" : { "Fn::FindInMap" : [ "KeyPairMap", { "Ref" : "EnvType" }, "kp" ]},
				"AssociatePublicIpAddress" : "true",
				"SecurityGroups" : [ { "Ref" : "ASGPilot" } ],
				"UserData" : {
				"Fn::Base64" : {
					"Fn::Join" : ["\n", [
						"#!/bin/bash -x",
						"exec >& /var/log/cloud-output.log",
						{ "Fn::Join": [ " \\\n", [
							"curl -s --retry 30",
							{"Fn::Join" : [ "", [ "https://s3-us-west-2.amazonaws.com/company-ci-files/userdata/userdata_script_v",{ "Ref" : "UserScriptVersion" },".sh" ]]},
							"| type=Cassandra",
							{ "Fn::Join": [ "=", [ "envtype", { "Ref" : "EnvType" } ] ] },
							{ "Fn::Join": [ "=", [ "envname", "Cassandra" ] ] },
							{ "Fn::Join": [ "=", [ "stackname", { "Ref" : "AWS::StackName" } ] ] },
							{ "Fn::Join": [ "=", [ "teamname", { "Ref": "TeamName" } ] ] },
							{ "Fn::Join": [ "=", [ "vpcid", { "Ref": "VPC" } ] ] },
							{ "Fn::Join": [ "=", [ "region", { "Ref": "Region" } ] ] },
							{ "Fn::Join": [ "=", [ "hostedzoneid", { "Ref" : "VPCHostedZone" } ] ] },
							{ "Fn::Join": [ "=", [ "analyticsnodes", { "Fn::FindInMap" : [ "ScalingMin" , { "Ref" : "EnvType" }, "Analytics" ] } ] ] },
							{ "Fn::Join": [ "=", [ "mysql_server", { "Fn::GetAtt" : [ "ASRDSdb", "Endpoint.Address" ] } ] ] },
							{ "Fn::Join": [ "=", [ "buildnumber", { "Ref" : "BuildNumber" } ] ] },
							{ "Fn::Join": [ "=", [ "numberofmachines", { "Fn::FindInMap" : [ "ScalingMin", { "Ref" : "EnvType" }, "Cassandra"] } ] ] },
							{ "Fn::Join": [ "=", [ "password", { "Fn::FindInMap" : [ "CassPassword", { "Ref" : "EnvType" }, "pass" ] } ] ] },
							"bash"
						]]},
						{ "Fn::Join": [ "", [
							"#!/bin/bash\n",
							"sudo apt-get update\n",
							"sudo apt-get install -y python-pip python-setuptools ruby2.0\n",
							"sudo /opt/bitnami/python/bin/easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
							"/opt/bitnami/python/bin/cfn-signal -e $? ",
							"  --stack ", { "Ref": "AWS::StackName" },
							"  --resource CassandraServersASG" ,
							"  --region ", { "Ref" : "AWS::Region" }
							]]}
					]]}}
				}
			},

			"BastionServerLaunchConfiguration" : {
				"Type" : "AWS::AutoScaling::LaunchConfiguration",
				"Properties" : {
				"ImageId" : { "Fn::FindInMap" : [ "BastionAmi", { "Ref" : "Region" }, "ami" ]},
				"InstanceType" : "t2.micro",
				"KeyName" : { "Fn::FindInMap" : [ "BastionKeyPair", { "Ref" : "Region" }, "bkp" ]},
				"AssociatePublicIpAddress" : "true",
				"SecurityGroups" : [ { "Ref" : "BastionSG" } ],
				"UserData" : {
				"Fn::Base64" : {
					"Fn::Join" : ["\n", [
						"#!/bin/bash -x",
						"exec >& /var/log/cloud-output.log",
						{ "Fn::Join": [ " \\\n", [
							"curl -s --retry 30",
							{"Fn::Join" : [ "", [ "https://s3-us-west-2.amazonaws.com/company-ci-files/userdata/userdata_script_v",{ "Ref" : "UserScriptVersion" },".sh" ]]},
							"| type=Bastion",
							{ "Fn::Join": [ "=", [ "envtype", { "Ref" : "EnvType" } ] ] },
							{ "Fn::Join": [ "=", [ "envname", "Bastion" ] ] },
							{ "Fn::Join": [ "=", [ "stackname", { "Ref" : "AWS::StackName" } ] ] },
							{ "Fn::Join": [ "=", [ "teamname", { "Ref": "TeamName" } ] ] },
							{ "Fn::Join": [ "=", [ "vpcid", { "Ref": "VPC" } ] ] },
							{ "Fn::Join": [ "=", [ "region", { "Ref": "Region" } ] ] },
							{ "Fn::Join": [ "=", [ "asgpilotsgid", { "Ref": "ASGPilot" } ] ] },
							{ "Fn::Join": [ "=", [ "bastionsgid", { "Ref": "BastionSG" } ] ] },
							{ "Fn::Join": [ "=", [ "analyticsnodes", { "Fn::FindInMap" : [ "ScalingMin" , { "Ref" : "EnvType" }, "Analytics" ] } ] ] },
							{ "Fn::Join": [ "=", [ "vpcpeeringid", { "Ref" : "VPCPeering" } ] ] },
							{ "Fn::Join": [ "=", [ "hostedzoneid", { "Ref" : "VPCHostedZone" } ] ] },
							{ "Fn::Join": [ "=", [ "buildnumber", { "Ref" : "BuildNumber" } ] ] },
							{ "Fn::Join": [ "=", [ "fqdn", { "Fn::Join" : [ ".", [ { "Ref" : "VPC" }, { "Ref" : "Region" }, "company", "private" ] ] } ] ] },
							"bash"
						]]},
						{ "Fn::Join": [ " \\\n", [
							"/opt/aws/bin/cfn-signal -e $? ",
							"  --stack ", { "Ref": "AWS::StackName" },
							"  --resource BastionServersASG" ,
							"  --region ", { "Ref" : "AWS::Region" }
						]]}
					]]}}
				}
			},

			"ServerProfile" : {
				"Type" : "AWS::IAM::InstanceProfile",
				"Properties" : {
					"Path" : "/",
					"Roles" : ["BackendServer"]
				}
			}
	},

	"Outputs" : {
		"VPC" : {
			"Value" : { "Ref" : "VPC" },
			"Description" : "VPC Id"
		},
		"ApiAutoScalingGroup" : {
			"Value" : { "Ref" : "ApiServersASG" },
			"Description" : "Api Servers AutoScalingGroup"
		},
		"BatchAutoScalingGroup" : {
			"Value" : { "Ref" : "BatchServersASG" },
			"Description" : "Batch Servers AutoScalingGroup"
		},
		"AnalyticsAutoScalingGroup" : {
			"Value" : { "Ref" : "AnalyticsServersASG" },
			"Description" : "Analytics Servers AutoScalingGroup"
		},
		"CassandraAutoScalingGroup" : {
			"Value" : { "Ref" : "CassandraServersASG" },
			"Description" : "Analytics Servers AutoScalingGroup"
		},
		"BastionAutoScalingGroup" : {
			"Value" : { "Ref" : "BastionServersASG" },
			"Description" : "Analytics Servers AutoScalingGroup"
		},
		"SubnetOne" : {
			"Value" : { "Ref" : "SubnetOne" },
			"Description" : "Subnet One"
		},
		"SubnetTwo" : {
			"Value" : { "Ref" : "SubnetTwo" },
			"Description" : "Subnet Two"
		},
		"SubnetThree" : {
			"Value" : { "Ref" : "SubnetThree" },
			"Description" : "Subnet Three"
		},
		"SecurityGroup" : {
			"Value" : { "Ref" : "ASGPilot" },
			"Description" : "ASGPilot Security Group"
		},
		"RDSEndpoint" : {
			"Value" : { "Fn::GetAtt" : [ "ASRDSdb", "Endpoint.Address" ] },
			"Description" : "RDS MySQL EndPoint - created by this stack"
		},
		"RDSDBSnapshotID" : {
			"Value" : { "Ref" : "RDSSnapshotID" },
			"Description" : "Name of RDS Snapshot ID to restore from"
		},
		"VPCPeeringID" : {
			"Value" : { "Ref" : "VPCPeering" },
			"Description" : "VPC Peering Connection ID"
		},
		"ELBName" : {
			"Value" : { "Fn::GetAtt" : [ "ApiLoadBalancer", "LoadBalancerName" ] },
			"Description" : "Name of Api ELB"
		},
		"VPCHostedZoneId" : {
			"Value" : { "Ref" : "VPCHostedZone" },
			"Description" : "Name of hosted zone created by the stack"
		}
	}
}
