name: Environment Protection


on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        type: choice
        options:
          - 'Choose an environment'
          - qa-XXXXX-1
          - qa-XXXXX-1
          - qa-XXXXX-2
          - qa-XXXXX-1
          - qa-XXXXX-1
          - qa-XXXXX-1
          - qa-XXXXX-1
          - qa-XXXXX-2
          - qa-XXXXX-1
          - qa-XXXXX-2
          - qa-XXXXX-1
          - qa-XXXXX-1
          - qa-XXXXX-1
          - qa-XXXXX-1
          - qa-XXXXX-1
          - qa-XXXXX-1
        default: qa-devops-1
      protection_status:
        description: 'Checked = Protected, Unchecked = Unprotected. Protection requires entering a protection end date'
        required: false
        type: boolean
        default: true
      protect_until:
        description: 'Protection end date (example format: 20-11-22 21:00 Israel Time)'
        required: false
        type: string

defaults:
  run:
    shell: bash

jobs:
  workflow-information:
    runs-on: ubuntu-latest
    name: Workflow Information
    steps:
      - name: Input Validation
        run: |
          if [[ "${{ github.event.inputs.protection_status }}" == "true" && -z "${{ github.event.inputs.protect_until }}" ]]; then
            echo "Protection date not provided! exiting."
            exit 1
          fi

      - name: Workflow information
        run: |
          echo "Workflow Information:"
          echo "Environment Name: ${{ github.event.inputs.environment }}"
          echo "Owner Name: ${{ github.actor }}"
          echo "Deployment Job Link: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  environment-protection:
    runs-on: ubuntu-latest
    needs: workflow-information
    outputs:
      protection_status: ${{ steps.enable-disable-protection.outputs.protection_status }}
    name: Protect / Unprotect
    steps:
      - name: Checkout PRODUCT_NAME-deployer
        uses: actions/checkout@v2
        with:
          ref: dev
          path: PRODUCT_NAME-deployer

      - name: Set up runner
        run: sudo pip install boto3

      - name: Login AWS ops account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACTIONS_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.ACTIONS_AWS_SECRET_KEY }}
          aws-region: eu-west-1
          mask-aws-account-id: 'no'
          role-to-assume: arn:aws:iam::AWS_ACCOUNT_ID:role/github-actions-workflows
          role-skip-session-tagging: true
          role-duration-seconds: 14400

      - name: Set environment's protection status
        id: enable-disable-protection
        run: |
          cd PRODUCT_NAME-deployer/ci_tools
          if [[ "${{ github.event.inputs.protection_status }}" == "false" ]]; then
            PROTECTION_STATUS="Disabled"
            python3 environments_protection_dynamodb.py -e ${{ github.event.inputs.environment }} -a unprotect
          else
            end_protection_timestamp="${{ github.event.inputs.protect_until }}"
            PROTECTION_STATUS="Enabled until $(echo $end_protection_timestamp | sed -e 's/ / at /')!"
            python3 environments_protection_dynamodb.py -e ${{ github.event.inputs.environment }} -a protect -t "${end_protection_timestamp}"
          fi
          echo "protection_status=${PROTECTION_STATUS}" >> $GITHUB_OUTPUT

  notify:
    runs-on: ubuntu-latest
    name: Notify Slack
    needs: environment-protection
    steps:
      - name: Set Slack Message - Failure
        if: needs.environment-protection.result != 'success'
        id: slack-message-failure
        run: |
          export DATA=$(cat << EOF
          {
            "environment_name": "${{ github.event.inputs.environment }}",
            "actor": "${{ github.actor }}",
            "protection_status": "${{ needs.environment-protection.outputs.protection_status }}",
            "message": "Failed changing environment's protection status :x:",
            "job_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }
          EOF
          )
          export PAYLOAD=$(echo $DATA | jq -c)
          echo "payload=${PAYLOAD}" >> $GITHUB_OUTPUT

      - name: Send Slack Notification - Failure
        if: needs.environment-protection.result != 'success'
        id: slack-fail
        uses: slackapi/slack-github-action@v1.14.0
        with:
          payload: ${{ steps.slack-message-failure.outputs.payload }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ENVIRONMENT_PROTECTION_SLACK_WEBHOOK_URL }}

      - name: Set Slack Message - Success
        if: needs.environment-protection.result == 'success'
        id: slack-message-success
        run: |
          export DATA=$(cat << EOF
          {
            "environment_name": "${{ github.event.inputs.environment }}",
            "actor": "${{ github.actor }}",
            "protection_status": "${{ needs.environment-protection.outputs.protection_status }}",
            "message": "Succeeded changing environment's protection status :white_check_mark:",
            "job_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }
          EOF
          )
          export PAYLOAD=$(echo $DATA | jq -c)
          echo "payload=${PAYLOAD}" >> $GITHUB_OUTPUT

      - name: Send Slack Notification - Success
        if: needs.environment-protection.result == 'success'
        id: slack-success
        uses: slackapi/slack-github-action@v1.14.0
        with:
          payload: ${{ steps.slack-message-success.outputs.payload }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ENVIRONMENT_PROTECTION_SLACK_WEBHOOK_URL }}
